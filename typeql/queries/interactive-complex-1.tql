match
    # $person isa Person, has id :personId;
    $person isa Person, has id 478;
    $other-person isa Person;
    # $other-person has firstName :firstName;
    ?distance = ?local_distance;
    {
        ?local_distance = 1;
        $r1(friend: $person, friend: $other-person) isa knows;
        not {$other-person is $person;};
    } or {
        ?local_distance = 2;
        $r1(friend: $person, friend: $friend1) isa knows;
        $r2(friend: $friend1, friend: $other-person) isa knows;
        not {$friend1 is $person;};
        not {$other-person is $person;};
        not {$other-person is $friend1;};
    } or {
        ?local_distance = 3;
        $r1(friend: $person, friend: $friend1) isa knows;
        $r2(friend: $friend1, friend: $friend2) isa knows;
        $r3(friend: $friend2, friend: $other-person) isa knows;
        not {$friend1 is $person;};
        not {$friend2 is $person;};
        not {$other-person is $person;};
        not {$other-person is $friend1;};
        not {$other-person is $friend2;};
        not {$friend2 is $friend1;};
    };
    
    $other-person has id $friendId;
    $other-person has lastName $friendLastName;
    $other-person has birthday $friendBirthday;
    $other-person has creationDate $friendCreationDate;
    $other-person has gender $friendGender;
    $other-person has browserUsed $friendBrowserUsed;
    $other-person has locationIP $friendLocationIP;
    $city-relation(location: $other-person, locatedIn: $friendCityName) isa isLocatedIn;

fetch
    $friendId;
    $friendLastName; 
    $friendBirthday;
    $friendCreationDate;
    $friendGender;
    $friendBrowserUsed;
    $friendLocationIP;
    $friendCityName;
    ?distance;
    friendEmail: {
        match
            $other-person has email $mail;
        fetch
            $mail;
    };
    friendLanguages: {
        match
            $other-person has speaks $lang;
        fetch
            $lang;
    };
    friendUniversity: {
        match
            $uni-relation(student: $other-person, university: $universities) isa studyAt,
                has startYear $startYear;
            $universities has name $universityName;
            $unicity-relation(location: $universities, locatedIn: $uni-location) isa isLocatedIn;
        fetch
            $universityName;
            $startYear; 
            $uni-location;
    };
    friendCompany: {
        match
            $company-relation(employee: $other-person, employer: $companies) isa workAt,
                has workFrom $workFrom;
            $companies has name $companyName;
            $companycity-relation(location: $companies, locatedIn: $company-location) isa isLocatedIn;
        fetch
            $companyName;
            $workFrom;
            $company-location;
    };

sort ?distance, $friendLastName, $friendId;
limit 20;