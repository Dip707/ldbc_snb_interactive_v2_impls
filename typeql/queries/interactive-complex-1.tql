match
    # $person isa Person, has id :personId;
    $person isa Person, has id 478;
    $other-person isa Person;
    # $other-person has firstName :firstName;
    ?distance = ?local_distance;
    {
        ?local_distance = 1;
        $r1(friend: $person, friend: $other-person) isa knows;
        not {$other-person is $person;};
    } or {
        ?local_distance = 2;
        $r1(friend: $person, friend: $friend1) isa knows;
        $r2(friend: $friend1, friend: $other-person) isa knows;
        not {$friend1 is $person;};
        not {$other-person is $person;};
        not {$other-person is $friend1;};
    } or {
        ?local_distance = 3;
        $r1(friend: $person, friend: $friend1) isa knows;
        $r2(friend: $friend1, friend: $friend2) isa knows;
        $r3(friend: $friend2, friend: $other-person) isa knows;
        not {$friend1 is $person;};
        not {$friend2 is $person;};
        not {$other-person is $person;};
        not {$other-person is $friend1;};
        not {$other-person is $friend2;};
        not {$friend2 is $friend1;};
    };
    
    $other-person has id $friendId;
    $other-person has lastName $friendLastName;
    $other-person has birthday $friendBirthday;
    $other-person has creationDate $friendCreationDate;
    $other-person has gender $friendGender;
    $other-person has browserUsed $friendBrowserUsed;
    $other-person has locationIP $friendLocationIP;
    $city-relation(location: $other-person, locatedIn: $friend-city) isa isLocatedIn;
    $friend-city  has name $friendCityName;
    $other-person has email $emails;
    $other-person has speaks $languages;
    $uni-relation(student: $other-person, university: $universities) isa studyAt;
    $universities has name $universityName;

get
    $friendId,?distance,$friendLastName,$friendBirthday,$friendCreationDate,$friendGender,$friendBrowserUsed,$friendLocationIP,$friendCityName,$universityName;
    sort ?distance, $friendLastName, $friendId;
    limit 20;