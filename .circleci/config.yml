version: 2.1
orbs:
  slack: circleci/slack@3.4.2
workflows:
  version: 2
  build:
    jobs:
      - test

jobs:
  test:
    resource_class: large
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt update && sudo apt install -y zstd
            scripts/install-dependencies.sh
            paramgen/scripts/install-dependencies.sh
      - run:
          name: Build project
          command: scripts/build.sh
      - run:
          name: Download small data set for Cypher
          command: |
            # Cypher
            cd cypher
            scripts/get-sample-data-set.sh
            cd ..
      - run:
          name: Download small data set for Postgres
          command: |
            # Postgres
            cd postgres
            scripts/get-sample-data-set.sh
            cd ..
      - run:
          name: Download small data set for updates
          command: |
            # regular CSVs for updates
            wget -q https://ldbcouncil.org/ldbc_snb_datagen_spark/social-network-sf0.003-bi-composite-merged-fk.zip
            unzip -q social-network-sf0.003-bi-composite-merged-fk.zip
      - run:
          name: Convert update streams
          command: |
            git clone --branch v2.0-dev https://github.com/ldbc/ldbc_snb_interactive_driver
            cd ldbc_snb_interactive_driver/scripts/
            ./install-dependencies-for-convert-script.sh
            export LDBC_SNB_DATA_ROOT_DIRECTORY=../../social-network-sf0.003-bi-composite-merged-fk/
            ./convert.sh
            mv inserts ../../update-streams/
            mv deletes ../../update-streams/
            cd ../..
      - run:
          name: Generate parameters
          command: |
            cd paramgen
            scripts/get-sample-factors.sh
            scripts/paramgen.sh
            cd ..
      ### Neo4j
      - run:
          name: Tiny data set - Load Neo4j database and create a backup
          command: |
            cd cypher
            . scripts/use-sample-data-set.sh
            scripts/load-in-one-step.sh
            scripts/backup-database.sh
            cd ..
      - run:
          name: Tiny data set - Create validation parameters with Neo4j project
          command: |
            cd cypher
            driver/create-validation-parameters.sh
            cp validation_params.json validation_params_cypher_tiny.json
            cd ..
      ### PostgreSQL
      - run:
          name: Tiny data set - Load PostgreSQL database and create a backup
          command: |
            cd postgres
            . scripts/use-sample-data-set.sh
            scripts/load-in-one-step.sh
            scripts/backup-database.sh
            cd ..
      - run:
          name: Tiny data set - Create validation parameters with PostgreSQL
          command: |
            cd postgres
            driver/create-validation-parameters.sh
            scripts/stop.sh
            cp validation_params.json validation_params_postgres_tiny.json
            cd ..
      ### Neo4j
      - run:
          name: Tiny data set - Cross-validate the Neo4j project based on the results from PostgreSQL
          command: |
            cp postgres/validation_params_postgres_tiny.json cypher/validation_params.json
            cd cypher
            scripts/restore-database.sh
            driver/validate.sh | tee validation-log.txt
            grep 'Validation Result: PASS' validation-log.txt
            cd ..
      - run:
          name: Tiny data set - Benchmark Neo4j
          command: |
            cd cypher
            scripts/restore-database.sh
            driver/benchmark.sh
            cd ..
      ### PostgreSQL
      - run:
          name: Tiny data set - Cross-validate the PostgreSQL project based on the results from Neo4j
          command: |
            cp cypher/validation_params_cypher_tiny.json postgres/validation_params.json
            cd postgres
            scripts/restore-database.sh
            driver/validate.sh | tee validation-log.txt
            grep 'Validation Result: PASS' validation-log.txt
            cd ..
      - run:
          name: Tiny data set - Benchmark PostgreSQL
          command: |
            cd postgres
            scripts/restore-database.sh
            driver/benchmark.sh
            scripts/stop.sh
            cd ..
      - run:
          name: Get SF1 data set
          command: |
            curl -L https://surfdrive.surf.nl/files/index.php/s/IbWgmBVQfdu1BRV/download | tar -xv --use-compress-program=unzstd
      - run:
          name: Process SF1 data set
          command: |
            export SF=1
            export LDBC_SNB_DRIVER_DIR=`pwd`/ldbc_snb_interactive_driver
            export LDBC_SNB_DATA_ROOT_DIRECTORY=`pwd`/out-sf${SF}
            export LDBC_SNB_IMPLS_DIR=`pwd`

            echo "==================== Generate update streams ===================="
            cd ${LDBC_SNB_DRIVER_DIR}
            mkdir update-streams-sf${SF}/

            cd scripts
            ./convert.sh
            mv inserts ${LDBC_SNB_IMPLS_DIR}/update-streams-sf${SF}/
            mv deletes ${LDBC_SNB_IMPLS_DIR}/update-streams-sf${SF}/

            echo "==================== Generate parameters ===================="
            cd ${LDBC_SNB_IMPLS_DIR}
            mkdir parameters-sf${SF}

            cd paramgen
            scripts/get-factors.sh
            scripts/paramgen.sh
            cd ..

            mv parameters/*.parquet parameters-sf${SF}/
      ### Neo4j
      - run:
          name: SF1 data set - Load Neo4j database and create a backup
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cd cypher
            . scripts/use-datagen-data-set.sh
            scripts/load-in-one-step.sh
            scripts/backup-database.sh
            cd ..
      - run:
          name: SF1 data set - Create validation parameters with Neo4j project
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cd cypher
            . scripts/use-datagen-data-set.sh
            driver/create-validation-parameters.sh driver/create-validation-parameters-sf${SF}.properties
            cp validation_params.json validation_params_cypher_sf${SF}.json
            cd ..
      ### PostgreSQL
      - run:
          name: SF1 data set - Load PostgreSQL database and create a backup
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cd postgres
            . scripts/use-datagen-data-set.sh
            scripts/load-in-one-step.sh
            scripts/backup-database.sh
            cd ..
      - run:
          name: SF1 data set - Create validation parameters with PostgreSQL
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cd postgres
            . scripts/use-datagen-data-set.sh
            driver/create-validation-parameters.sh
            scripts/stop.sh
            cp validation_params.json validation_params_postgres_sf${SF}.json
            cd ..
      ### Neo4j
      - run:
          name: SF1 data set - Cross-validate the Neo4j project based on the results from PostgreSQL
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cp postgres/validation_params_postgres_sf${SF}.json cypher/validation_params.json
            cd cypher
            . scripts/use-datagen-data-set.sh
            scripts/restore-database.sh
            driver/validate.sh | tee validation-log.txt
            grep 'Validation Result: PASS' validation-log.txt
            cd ..
      - run:
          name: SF1 data set - Benchmark Neo4j
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cd cypher
            . scripts/use-datagen-data-set.sh
            scripts/restore-database.sh
            driver/benchmark.sh
            cd ..
      ### PostgreSQL
      - run:
          name: SF1 data set - Cross-validate the PostgreSQL project based on the results from Neo4j
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cp cypher/validation_params_cypher_sf${SF}.json postgres/validation_params.json
            cd postgres
            . scripts/use-datagen-data-set.sh
            scripts/restore-database.sh
            driver/validate.sh | tee validation-log.txt
            grep 'Validation Result: PASS' validation-log.txt
            cd ..
      - run:
          name: SF1 data set - Benchmark PostgreSQL
          command: |
            export SF=1
            export LDBC_SNB_DATAGEN_DIR=`pwd`
            cd postgres
            . scripts/use-datagen-data-set.sh
            scripts/restore-database.sh
            driver/benchmark.sh
            scripts/stop.sh
            cd ..
      - slack/status
